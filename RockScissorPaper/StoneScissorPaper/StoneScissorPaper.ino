// Stone Paper Scissor Game

#include<Servo.h> // including some essential libraries
#include<LiquidCrystal_I2C.h>
#include<Wire.h>

LiquidCrystal_I2C lcd(0x27, 16, 2);  //SDA=A4, SCL=A5

int trig = 7;
int echo = 6;
long TimeInMicro;
float distanceInCm; // ultrasonic sensor can read distance between 2 to 400 cm;

volatile long A;  // volatile directs the compiler to load the variable from Ram rather than storage register as the value of a variable stored in registers can be inaccurate

float checkDistance()
{
  digitalWrite(trig, LOW);
  delayMicroseconds(2);  // add delay in microseconds
  digitalWrite(trig, HIGH);
  delayMicroseconds(10);
  digitalWrite(trig, LOW);
  TimeInMicro = pulseIn(echo, HIGH);  // note the time taken by signal to go and come back
  distanceInCm = TimeInMicro/58.00;  // speed of light in air (= 0. 03cm/microsecond), distance = time*speed (1/58 == 0.03/2)
  delay(10);
  return distanceInCm;
}
// naming my servo
Servo servo1;  // stone
Servo servo2; // paper
Servo servo3; // scissor

int led11 = 11; // giving pin to leds and speaker
int led12 = 12;
int led13 = 13;
int speaker = 5;

void setup()
{
  // Serial.begin(9600);
  lcd.init(); // intialising led
  lcd.backlight();
  lcd.setBacklight(HIGH);
  lcd.setCursor(0, 0);  // 1st column, 1st row
  lcd.print(" ROCK PAPER AND ");
  lcd.setCursor(0, 1);  // 1st column, 2nd row
  lcd.print("  SCISSOR GAME  ");
  delay(5000);
  pinMode(trig, OUTPUT);
  pinMode(echo, INPUT);
  pinMode(speaker, OUTPUT);
  pinMode(led11, OUTPUT);
  pinMode(led12, OUTPUT);
  pinMode(led13, OUTPUT);
  servo1.attach(2);
  servo2.attach(3);
  servo3.attach(4);
  servo1.write(179);
  servo2.write(179);
  servo3.write(179);
  lcd.clear();
}

void loop()
{
  float distance = checkDistance();
  // Serial.println(distance);
  // delay(1000);
  if(distance < 10)
  {
    A = random(1, 4); // generates random number from  1 to 3 (i.e. 1, 2, 3)
    // Serial.print("random number: ");
    // Serial.println(A);
    // delay(1000);
    switch(A)
    {
      case 1:
      lcd.setCursor(6, 0);
      lcd.print("ROCK");
      tone(speaker, 131);  // tone(pin, frequency) or tone(pin, frequency(int hertz), duration(in miliseconds))
      delay(100);
      noTone(speaker); // stops the generation of square wave generated by tone, noTone(pin)
      servo1.write(120);
      digitalWrite(led11, HIGH);
      delay(1000);
      servo1.write(179);
      digitalWrite(led11, LOW);
      delay(500);
      lcd.clear();
      break;
      case 2:
      lcd.setCursor(6, 0);
      lcd.print("PAPER");
      tone(speaker, 131);
      delay(100);
      noTone(speaker);
      servo2.write(120);
      digitalWrite(led12, HIGH);
      delay(1000);
      servo2.write(179);
      digitalWrite(led12, LOW);
      delay(500);
      lcd.clear();
      break;
      case 3:
      lcd.setCursor(5, 0);
      lcd.print("SCISSOR");
      tone(speaker, 131);
      delay(100);
      noTone(speaker);
      servo3.write(120);
      digitalWrite(led13, HIGH);
      delay(1000);
      servo3.write(179);
      digitalWrite(led13, LOW);
      delay(500);
      lcd.clear();
      break;
    }
  }
  else
  {
    lcd.setCursor(0, 0);  // 1st column, 1st row
    lcd.print(" ROCK PAPER AND ");
    lcd.setCursor(0, 1);  // 1st column, 2nd row
    lcd.print("  SCISSOR GAME  "); 
    delay(1000);
    lcd.clear();
  }
}
